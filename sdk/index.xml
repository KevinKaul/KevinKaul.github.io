<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://kevinkaul.github.io/sdk/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://kevinkaul.github.io/sdk/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://kevinkaul.github.io/sdk/signature_c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevinkaul.github.io/sdk/signature_c/</guid><description>C sample code # static void ZY_hmac_sha1(__u8 *key,__s32 key_len,__u8 *data,__s32 data_len,__u8 *digest) { __s32 b = 64; /* blocksize */ __u8 ipad = 0x36; __u8 opad = 0x5c; __u8 k0[64]; __u8 k0xorIpad[64]; __u8 step7data[64]; __u8 step5data[4096+128]; __u8 step8data[64+20]; __s32 i=0; ukit_memset(k0,0,sizeof(k0)); ukit_memset(k0xorIpad,0,sizeof(k0xorIpad)); ukit_memset(step7data,0,sizeof(step7data)); ukit_memset(step5data,0,sizeof(step5data)); ukit_memset(step8data,0,sizeof(step8data)); for (i=0; i&amp;lt;64; i++) { k0[i] = 0x00; } if (key_len !</description></item><item><title/><link>https://kevinkaul.github.io/sdk/signature_cs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevinkaul.github.io/sdk/signature_cs/</guid><description>C# sample code # public static string HMACSHA1Text(string stringToSign,string appSecret) { HMACSHA1 hmacsha1 = new HMACSHA1(); hmacsha1.Key = System.Text.Encoding.UTF8.GetBytes(appSecret); byte[] dataBuffer = System.Text.Encoding.UTF8.GetBytes(stringToSign); byte[] hashBytes = hmacsha1.ComputeHash(dataBuffer); return Convert.ToBase64String(hashBytes); } long timestamp = (long)(DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalSeconds; string stringToSign = &amp;#34;appId=&amp;#34; + appId + &amp;#34;&amp;amp;timestamp=&amp;#34; + timestamp.ToString(); string signature = HMACSHA1Text(stringToSign, appSecret)</description></item><item><title/><link>https://kevinkaul.github.io/sdk/signature_golang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevinkaul.github.io/sdk/signature_golang/</guid><description>Golang sample code # import ( &amp;#34;bytes&amp;#34; &amp;#34;crypto/hmac&amp;#34; &amp;#34;crypto/sha1&amp;#34; &amp;#34;encoding/base64&amp;#34; &amp;#34;time&amp;#34; ) func getSignature(appId, appSecret string) string { s := fmt.Sprintf(&amp;#34;appId=%s&amp;amp;timestamp=%d&amp;#34;, appId, time.Now().Unix()) mac := hmac.New(sha1.New, []byte(appSecret)) mac.Write([]byte(s)) return base64.StdEncoding.EncodeToString(mac.Sum(nil)) }</description></item><item><title/><link>https://kevinkaul.github.io/sdk/signature_java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevinkaul.github.io/sdk/signature_java/</guid><description>Java sample code # import java.util.Base64; import javax.crypto.Mac; import javax.crypto.spec.SecretKeySpec; public static String calculateRFC2104HMAC(String stringToSign, String appSecret) { SecretKeySpec signingKey = new SecretKeySpec(appSecret.getBytes(),&amp;#34;HmacSHA1&amp;#34;); Mac mac = Mac.getInstance(&amp;#34;HmacSHA1&amp;#34;); mac.init(signingKey); byte[] hashBytes = mac.doFinal(stringToSign.getBytes()); return Base64.getEncoder().encodeToString(hashBytes); } String timestamp = Long.toString(System.currentTimeMillis() / 1000); String stringToSign = &amp;#34;appId=&amp;#34; + appId + &amp;#34;&amp;amp;timestamp=&amp;#34; + timestamp; String signature = calculateRFC2104HMAC(stringToSign, appSecret)</description></item><item><title/><link>https://kevinkaul.github.io/sdk/signature_python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevinkaul.github.io/sdk/signature_python/</guid><description>Python sample code # import hashlib import hmac def _hmac_sha1(data, secret): return str(base64.b64encode(hmac.new(bytes(secret, &amp;#39;utf-8&amp;#39;), bytes(data, &amp;#39;utf-8&amp;#39;), hashlib.sha1).digest()), &amp;#39;utf-8&amp;#39;) timestamp = str(int(time.time())) string_to_sign = &amp;#34;appId=&amp;#34; + app_id + &amp;#34;&amp;amp;timestamp=&amp;#34; + timestamp signature = _hmac_sha1(string_to_sign, app_secret)</description></item></channel></rss>