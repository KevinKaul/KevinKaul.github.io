<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://kevinkaul.github.io/setup/usage/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://kevinkaul.github.io/setup/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>- 1. Generate JWT token</title><link>https://kevinkaul.github.io/setup/usage/token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevinkaul.github.io/setup/usage/token/</guid><description>Assume that you already have AppKey and AppSecret, and know the domain name address to request.
Get Token By API # curl -X POST &amp;#39;https://{{$HOST}}/auth/generateToken&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ --data &amp;#39;{ &amp;#34;timestamp&amp;#34;:{{$timestamp}}, &amp;#34;signature&amp;#34;:{{$signature}}, &amp;#34;appKey&amp;#34;:&amp;#34;{{$appKey}}&amp;#34; }&amp;#39; e.g.
{ &amp;#34;timestamp&amp;#34;:1690637789, &amp;#34;signature&amp;#34;:&amp;#34;FEecGK0xbTOF3yxH3zq11FgkqFg=&amp;#34;, &amp;#34;appKey&amp;#34;:&amp;#34;01e93ab5-dcb2-4c6b-a321-02c0c8d3831&amp;#34; } // appSecret : 04a013293939f96 How the signature is constructed # Step 1: Construct a normalized request string stringToSign using the appKey and timestamp request parameters (note the order of the parameters), such as:</description></item><item><title>- 2. Websocket streaming evaluation</title><link>https://kevinkaul.github.io/setup/usage/ws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kevinkaul.github.io/setup/usage/ws/</guid><description>Evaluation flowchart # mermaid.initialize({ "flowchart": { "useMaxWidth":true }, "theme": "default" } ) sequenceDiagram Client-Server: Establish a connection (Carry the token in the header or in the url) Server--Client: The connection was successful Client-Server: StartMessage Server--Client: StartedMessage loop Client-Server: Send audio data (binary) Server-Client: Returns real-time results (if you send startMsg with real-time and sentence or paragraph type) end Client-Server: StopMessage Server--Client: (Result &amp;&amp; CompletedMessage) || (ErrorMessage &amp;&amp; CompletedMessage) Request Host URL # wss://{{ApiHost}}/{{LangType}}/{{QuestionType}}</description></item></channel></rss>